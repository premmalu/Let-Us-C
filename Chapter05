#include <stdio.h>
#include <conio.h>
#include <math.h>

/* This is 5)[B]
(a) Write a program to calculate overtime pay of 10 employees.
Overtime is paid at the rate of Rs. 12.00 per hour for every hour
worked above 40 hours. Assume that employees do not work for
fractional part of an hour

int main()
{
    int a[10],increment=0;
    printf("Enter the Working hours of 10 employees:");
    for (int i=0;i<10;++i)
    {
        scanf("%d",&a[i]);
    }
    for(int j=0;j<10;j++)
    {
        if(a[j]>40)
        {
          increment=((a[j]-40)*12);
          printf("Increment for a[%d] is:  %d\n",j+1,increment);
        }
    }
}*/

/*
This is 5)[B]
(b) Write a program to find the factorial value of any number entered
through the keyboard.

int main()
{
    int a,factorial=1,i;
    printf("Enter the number:");
    scanf("%d",&a);
    i=a;
    while(a>=1)
    {
        factorial=factorial*a;
        a--;
    }
    printf("factorial of %d:%d",i,factorial);
}*/

/*This is 5)[B]
(c) Two numbers are entered through the keyboard. Write a program
to find the value of one number raised to the power of another.

int main()
{
    int a,b,c=1,i;
    printf("Enter the number a,b:");
    scanf("%d %d",&a,&b);
    i=b;
    while(i!=0)
    {
        c=c*a;
        i=i-1;
    }
    printf("%d",c);

}*/


/*This is 5)[B]
(d) Write a program to print all the ASCII values and their equivalent
characters using a while loop. The ASCII values vary from 0 to 255.

int main()
{
    int i=0;

    while(i++<255)
    {
        printf("equivalent ASCII values of %d is %c\n",i,i);
    }

}*/

/*This is 5)[B]
(e) Write a program to print out all Armstrong numbers between 1 and
500. If sum of cubes of each digit of the number is equal to the
number itself, then the number is called an Armstrong number. For
example, 153 = ( 1 * 1 * 1 ) + ( 5 * 5 * 5 ) + ( 3 * 3 * 3 ).

int main()
{
    int a=500,b,i;
    b=0;
    while(a-->0){
        int c=a;
        while(c>0)
        {
            i=c%10;
            b=b+(i*i*i);
            c=c/10;
        }
        printf("Armstrong numbers for %d is:%d\n",a,b);
        b=0;
    }
}*/

/*This is 5)[B]
(f) Write a program for a matchstick game being played between the
computer and a user. Your program should ensure that the
computer always wins. Rules for the game are as follows:
 There are 21 matchsticks.
 The computer asks the player to pick 1, 2, 3, or 4 matchsticks.
 After the person picks, the computer does its picking.
 Whoever is forced to pick up the last matchstick loses the game.


int main()
{
    int a,b=21,p,c;
    while(b>0){
        printf("%d",b);
        printf("Please take 1,2,3 or 4 cards:");
        scanf("%d",&a);
        if(a>0&&a<5){
        b=b-a;
        if(b==4)
        {
            b=b-3;
        }
        else if(b==2)
        {
            b=b-1;
        }
        else if(b==3)
        {
            b=b-2;
        }
        else
        {
            if(a%2!=0)
            {
                if(a==1)
                {
                    b=b-2;
                }
                else if(a==3)
                {
                    b=b-4;
                }
                c++;
            }
            else if(a%2==0)
            {
                if(a==2)
                {
                    b=b-1;
                }
                else if(a==4)
                {
                    b=b-3;
                }
                c++;
            }
            p++;
    }}}

    printf("You Lose");
}
*/

/*This is 5)[B]
(g) Write a program to enter numbers till the user wants. At the end it
should display the count of positive, negative and zeros entered.
int main()
{
    int a=1,b,positive=0,negative=0,zero=0;
    while(a==1)
    {
        printf("Enter the number:");
        scanf("%d",&b);

        if(b==0)
        {
            zero=zero+1;
        }
        else if(b>0)
        {
            positive=positive+1;
        }
        else if(b<0)
        {
            negative=negative+1;
        }
        printf("Enter 0 to quit or 1 to continue");
        scanf("%d",&a);
    }
    printf("%d%d%d",positive,negative,zero);
}*/

/*This is 5)[B]
(h) Write a program to receive an integer and find its octal equivalent.
(i) (Hint: To obtain octal equivalent of an integer, divide it continuously
by 8 till dividend doesn’t become zero, then write the remainders
obtained in reverse direction.)*/

/*int main()
{
    int a,octal=0,temp;

    printf("Enter the number:");
    scanf("%d",&a);

    while(a!=0)
    {
       temp=a%8;
       a=a/8;
       octal=(octal*10)+temp;
       printf("%d,",octal);
    }
    printf("\n");
}*/
/*void main()
{
int num,ocnum=1,foct=0,temp;
printf("\nEnter an integer = ");
scanf("%d",&num);
while(num>=8) //loop for converting decimal to octal
{
temp=num%8;
num=num/8;
ocnum=(ocnum*10)+temp;
}
ocnum=(ocnum*10)+num; //number is in reverse
while(ocnum!=1) //loop for reversing the octal result
{
temp=ocnum%10;
ocnum=ocnum/10;
foct=(foct*10)+temp;
}
printf("\nThe octal equivalent of %d\n",foct);
}*/

/*This is 5)[B]
(j) Write a program to find the range of a set of numbers entered
through the keyboard. Range is the difference between the smallest
and biggest number in the list.

int main()
{
    int small, big, range, num, limit;

    printf("Enter the limit\n");
    scanf("%d", &limit);

    printf("Enter %d numbers\n", limit);
    scanf("%d", &num);

    small = big = num;
    limit=limit-1;
    while(limit)
    {
        scanf("%d", &num);

        if(num > big)
        {
            big = num;
        }

        if(num < small)
        {
            small = num;
        }

        limit--;
    }
    range = big - small;

    printf("Small Number = %d\nBig Number = %d\n", small, big);
    printf("Range is %d\n", abs(range));

    return 0;
}*/
